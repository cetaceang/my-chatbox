"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dotenv # Add dotenv import

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file if it exists
dotenv_path = os.path.join(BASE_DIR, '.env')
if os.path.exists(dotenv_path):
    dotenv.load_dotenv(dotenv_path)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-default-key-change-me') # Provide a default for safety, but should be overridden
# It's strongly recommended to raise an error if SECRET_KEY is not set or is the default in production
# if SECRET_KEY == 'django-insecure-default-key-change-me' and not DEBUG:
#     raise ValueError("No SECRET_KEY set or default key used for production environment")

# SECURITY WARNING: don't run with debug turned on in production!
# Default to False if DEBUG environment variable is not set or is 'False'
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 't')

# Read ALLOWED_HOSTS from environment variable, split by comma
allowed_hosts_str = os.getenv('ALLOWED_HOSTS', '*')
ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_str.split(',') if host.strip()]
# Ensure '*' is handled correctly if it's the only value
if ALLOWED_HOSTS == ['*']:
    pass # Keep it as ['*'] if that's the intended value from .env
elif not ALLOWED_HOSTS and DEBUG:
    # Default to allowing localhost and 127.0.0.1 in DEBUG mode if ALLOWED_HOSTS is empty in .env
    ALLOWED_HOSTS = ['localhost', '127.0.0.1']
elif not ALLOWED_HOSTS and not DEBUG:
     # In production, if ALLOWED_HOSTS is empty in .env, raise an error or set a default secure value
     # For now, let's keep it empty, which will likely cause Django to raise an error if not '*'
     # raise ValueError("ALLOWED_HOSTS cannot be empty in production")
     pass

# CSRF Trusted Origins
csrf_trusted_origins_str = os.getenv('CSRF_TRUSTED_ORIGINS', '')
CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in csrf_trusted_origins_str.split(',') if origin.strip()]

if not CSRF_TRUSTED_ORIGINS and DEBUG:
    # Default to allowing localhost and 127.0.0.1 on port 8000 for local development
    CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'http://127.0.0.1:8000']


# HTTPS Proxy Settings (conditionally enabled via .env)
ENABLE_HTTPS_PROXY = os.getenv('ENABLE_HTTPS_PROXY_SETTINGS', 'False').lower() in ('true', '1', 't')
if ENABLE_HTTPS_PROXY:
    USE_X_FORWARDED_HOST = True
    USE_X_FORWARDED_PORT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'chat',
    'channels',
    'users',
    'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # WhiteNoise Middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'chat.middleware.BanCheckMiddleware', # 添加封禁检查中间件
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# 数据库路径可以由环境变量 DATABASE_PATH 指定，否则默认为 BASE_DIR / 'db.sqlite3'
# 这使得在 Docker 环境中可以轻松地将数据库文件放在持久化卷中
DATABASE_PATH = os.getenv('DATABASE_PATH', BASE_DIR / 'db.sqlite3')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': DATABASE_PATH,
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
# WhiteNoise Storage (Recommended for production, works in dev too)
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# 媒体文件配置
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Channels配置
ASGI_APPLICATION = 'config.asgi.application'

# ==============================================================================
# DYNAMIC BACKEND CONFIGURATION (Cache and Channels)
# ==============================================================================
# Use a single environment variable to control the backend for both Cache and Channels.
# - 'redis': Use Redis for production (requires Redis server).
# - 'memory': Use in-memory backend for local development.
BACKEND_TYPE = os.getenv('CACHE_TYPE', 'memory').lower()

if BACKEND_TYPE == 'redis':
    # When using Redis, default the host to 'localhost'.
    # This allows local development without setting REDIS_HOST in .env.
    # For Docker, set REDIS_HOST=redis in the .env file.
    REDIS_HOST = os.getenv('REDIS_HOST', 'localhost')
    REDIS_PORT = os.getenv('REDIS_PORT', '6379')
    
    # --- Django Cache Configuration ---
    REDIS_DB_CACHE = os.getenv('REDIS_DB_CACHE', '2')
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB_CACHE}",
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            }
        }
    }

    # --- Channels Layer Configuration ---
    REDIS_DB_CHANNELS = os.getenv('REDIS_DB_CHANNELS', '1')
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB_CHANNELS}"],
            },
        },
    }
    
else: # 'memory' or any other value
    # --- Django Cache Configuration (In-Memory) ---
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
        }
    }
    
    # --- Channels Layer Configuration (In-Memory) ---
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels.layers.InMemoryChannelLayer',
        },
    }

# 登录URL配置
LOGIN_URL = '/users/login/'
LOGIN_REDIRECT_URL = '/chat/'

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}
